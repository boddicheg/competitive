#include <iostream>
#include <vector>
#include <unordered_map>
#include <cmath>
#include <algorithm>

using namespace std;

#define watch(x) std::cout << (#x) << " is " << (x) << std::endl

template<typename T>
void print(const T &container)
{
    std::cout << "[ ";
    for (const auto &e : container)
        std::cout << e << " ";
    std::cout << "]" << std::endl;
}

std::ostream &operator<<(std::ostream &ss, const std::pair<int, int> &p)
{
    ss << "[ " << p.first << ", " << p.first << " ]";
    return ss;
}

static int x = []() { std::ios::sync_with_stdio(false); cin.tie(NULL); return 0; }();

int distance(const std::pair<int, int> &p1, const std::pair<int, int> &p2)
{
    return (p1.first - p2.first) * (p1.first - p2.first) + (p1.second - p2.second) * (p1.second - p2.second);
}

// O(n^3)
class Solution
{
public:
    int numberOfBoomerangs(vector<pair<int, int>> &points)
    {
        int count = 0;
        for (int i = 0; i < points.size(); ++i)
        {
            for (int j = 0; j < points.size(); ++j)
            {
                for (int k = 0; k < points.size(); ++k)
                {
                    auto p1 = points.at(i);
                    auto p2 = points.at(j);
                    auto p3 = points.at(k);
                    if (p1 != p2 && p2 != p3)
                    {
                        double dist1 = distance(p1, p2);
                        double dist2 = distance(p1, p3);
                        // std::cout << dist1 << " " << dist2 << ", (" << points.at(i) << points.at(j) << points.at(k) << ")" << std::endl;
                        if (dist1 == dist2)
                            count++;
                    }
                }
            }
        }
        return count;
    }
};

// O(?)
class Solution1
{
public:
    int numberOfBoomerangs(vector<pair<int, int>> &points)
    {
        int count = 0;
        for (int i = 0; i < points.size(); ++i)
        {
            std::unordered_map<int, int> table;
            for (int j = 0; j < points.size(); ++j)
            {
                if (points.at(j) == points.at(i))
                    continue;
                count += (table[distance(points.at(j), points.at(i))]++);
            }
        }

        return 2 * count;
    }
};

int main(int argc, char const *argv[])
{
    Solution1 s1;
    std::vector<pair<int, int>> data =
    {
        // {0, 0}, {1, 0}, {2, 0}
        {7822, -3128}, {8230, -7843}, {4481, -8255}, {3566, -847}, {592, -3459}, {7070, 5458}, {9838, 6585}, {6216, 1424}, {8539, 1192}, {1083, -7828}, {7177, 6872}, {9832, -6962}, {6242, -7194}, {5482, -5909}, {8586, -7950}, {2918, -3591}, {8922, -8852}, {4918, -245}, {9245, -1516}, {8908, 6189}, {1378, -4021}, {1647, 1216}, {2564, 4215}, {8993, -2545}, {5407, 76}, {5979, 2585}, {3301, 5811}, {1975, 5895}, {4969, 3810}, {9986, -6444}, {2212, 9257}, {6317, 7486}, {6757, 1235}, {7241, 6003}, {6072, -3851}, {2192, -2550}, {8480, -6160}, {5018, -2603}, {8055, 4011}, {1204, 9815}, {440, 7184}, {2400, -9907}, {9347, -9273}, {5988, -5683}, {4537, 5974}, {7873, -6899}, {1583, 4190}, {587, -1659}, {1777, -2172}, {696, 4201}, {330, 2888}, {8003, 8810}, {3080, 3022}, {2559, 1136}, {3385, 3764}, {7303, -9823}, {7300, 6055}, {270, 6647}, {6782, 6258}, {964, -2328}, {8585, -1163}, {773, -9832}, {9379, 1361}, {4861, 7509}, {9189, -4443}, {1710, -481}, {8446, -3934}, {4682, -2122}, {9088, -2759}, {5366, 8825}, {7357, -7331}, {9003, -5343}, {8724, 5625}, {1305, 5507}, {1884, -7731}, {9531, -9531}, {7459, 304}, {6989, -6810}, {1665, -8149}, {7051, 7207}, {7408, -1238}, {3078, -7794}, {4828, -2240}, {85, 268}, {1354, -4549}, {5445, -1289}, {8121, -9200}, {3369, -3155}, {6426, 1026}, {8704, -5338}, {3295, 8235}, {5131, 7106}, {8540, -7880}, {6649, -3443}, {323, 3700}, {116, -2268}, {8814, -6805}, {6290, 3642}, {7307, 6375}, {262, 5013}, {8179, -7940}, {77, -3700}, {2860, 3446}, {9497, 5638}, {824, -5446}, {300, 471}, {2789, -4569}, {7578, -2319}, {3904, -9421}, {591, -5773}, {4279, 707}, {8311, 3094}, {254, 4602}, {3088, 3914}, {7329, 9703}, {5279, -4492}, {1763, -4644}, {8160, -9025}, {5154, 4010}, {6614, 5978}, {8564, 6914}, {6450, -8647}, {8698, 380}, {5387, 8954}, {959, 5978}, {9533, -4762}, {3037, -2155}, {4684, -356}, {8799, 7773}, {3558, -3872}, {3828, -1163}, {7989, 5591}, {546, 6149}, {2918, -4300}, {159, -468}, {1679, -1277}, {2799, -1871}, {6429, -8503}, {8509, 1816}, {6803, -4180}, {4146, 6336}, {1058, -2817}, {533, -7905}, {6827, 9332}, {6220, 6737}, {1813, 48}, {1927, -198}, {1991, 2473}, {2303, 4909}, {4525, 2463}, {4442, 6204}, {7538, -6407}, {685, -9681}, {1442, 5546}, {8487, 8245}, {1366, 2633}, {4581, -1223}, {6169, 5115}, {872, -652}, {799, -2908}, {2438, 2612}, {7140, -5635}, {2414, 9131}, {3190, -8930}, {392, -2285}, {3533, 1186}, {272, -2577}, {4779, -9043}, {4095, 6221}, {6504, 2582}, {818, 4222}, {1568, -8248}, {2999, 4089}, {3219, 3871}, {9789, -5982}, {7315, -7773}, {2983, 4455}, {2944, 1749}, {9938, 6134}, {2819, 6683}, {202, -7296}, {7869, -9526}, {128, -7351}, {7783, 4223}, {5222, 639}, {3157, -7607}, {4862, -5275}, {4145, -5787}, {5166, 7364}, {4437, 4956}, {7734, 1752}, {7183, 717}, {2560, 6480}, {2467, -1150}, {8966, 5286}, {5533, -832}, {7991, 3403}, {5994, -5529}, {2404, -6222}, {5046, -6022}, {4417, 4555}, {6371, 9279}, {5633, -3132}, {3493, 799}, {584, 4282}, {5755, 8319}, {6034, 9291}, {5388, -1406}, {5771, -5793}, {3797, -8911}, {9494, 9330}, {258, 3837}, {9085, 2604}, {4660, -8511}, {6382, -3942}, {1820, 800}, {613, -1809}, {6431, 6246}, {1412, -3724}, {7046, 1996}, {558, -847}, {6667, -7055}, {8444, 2056}, {7891, -9433}, {6263, -8312}, {8009, 2109}, {1019, -5381}, {2298, -3544}, {7223, 6958}, {4298, 3606}, {3016, -3882}, {758, 9982}, {661, -6459}, {6228, -7927}, {9818, 9626}, {4070, -3272}, {8780, -9263}, {9673, 3576}, {9145, 7565}, {496, -4591}, {9253, -1495}, {3870, 6624}, {3124, 6169}, {9433, 347}, {3127, -6269}, {305, 2496}, {9849, -8937}, {2478, -9490}, {957, -4942}, {8936, 775}, {4685, -642}, {7503, 3465}, {6447, -6471}, {7041, 5593}, {1094, 7537}, {7354, 6699}, {2394, 1224}, {9676, 5518}, {3745, -891}, {2218, 3225}, {9192, -7477}, {5721, 9041}, {9939, 4551}, {5903, -9104}, {9609, 1191}, {8023, -5706}, {549, -8122}, {4111, -3003}, {1759, -8847}, {2590, -7147}, {5042, 6296}, {5905, 3789}, {3872, -8067}, {9307, -2382}, {7394, -2123}, {843, 6586}, {6753, -7084}, {1979, -3308}, {7467, -2118}, {3940, 3428}, {9074, -1685}, {7723, 5975}, {6545, 1834}, {2972, -1695}, {9339, -8086}, {7510, -9266}, {8210, -6585}, {4523, 8435}, {1700, -9818}, {6053, -906}, {8060, -3104}, {2032, 4813}, {9812, 4011}, {7857, -6369}, {1894, 8149}, {7059, 7320}, {2816, 1134}, {3295, -639}, {9321, 2620}, {7666, -4988}, {886, -4823}, {5746, -4551}, {4944, 6621}, {3884, -3355}, {3156, -63}, {2091, -8784}, {3185, 4124}, {2381, 9349}, {4487, -3410}, {2980, -3619}, {1091, 6391}, {53, -6093}, {7526, -299}, {3268, -3153}, {8673, -2713}, {8211, -441}, {2464, 310}, {5008, 3760}, {6931, 5244}, {6757, -9913}, {1533, -1151}, {7655, 4718}, {9325, -3612}, {4067, -6188}, {2978, 3399}, {6546, 4069}, {9791, -7049}, {4328, 3669}, {9004, -2403}, {6868, -2323}, {4884, -4921}, {3589, -6300}, {5389, -5051}, {7460, 8673}, {194, 4218}, {5112, -8273}, {9419, -880}, {6446, 5096}, {5508, -3135}, {5260, -5161}, {6617, -8194}, {5260, -3592}, {1110, -411}, {6429, 114}, {3538, 3297}, {7792, -5226}, {4728, 1381}, {8474, 118}, {6330, -7714}, {5143, 2876}, {2856, -9745}, {4604, -1373}, {5727, -2598}, {75, -8764}, {619, 5336}, {2427, -2764}, {3494, 7687}, {3644, 4604}, {7276, 73}, {4719, 7166}, {9722, 8863}, {1940, 4451}, {6596, -3234}, {921, 9278}, {5405, -3936}, {2155, 8261}, {2671, -6889}, {3241, -1601}, {513, -6684}, {5987, -8868}, {5004, -1586}, {4721, -1501}, {6101, 8365}, {9455, -270}, {4791, -9474}, {6896, -9135}, {9389, -1163}, {5316, -7663}, {5603, 2589}, {1616, -8992}, {5005, 123}, {5622, 7677}, {9586, 5215}, {2428, 6451}, {4883, -1585}, {7583, -112}, {6829, 8656}, {4739, 9282}, {7022, 4194}, {9012, 8165}, {4721, 5909}, {5382, 462}, {4746, -2949}, {2800, 6701}, {9640, 768}, {4062, 4646}, {7243, -3964}, {8675, -3171}, {7603, 1103}, {3280, 2486}, {9518, 7215}, {8726, 2699}, {5872, 3465}, {1981, -754}, {7660, -9006}, {3763, -7619}, {3255, 9145}, {2843, 4353}, {6196, -8005}, {1054, -7811}, {2763, -8532}, {6835, -3642}, {3856, -4490}, {3187, -8541}, {2965, 6467}, {3946, 2483}, {3683, 2672}, {1534, -4093}, {6138, 3515}, {5153, 150}, {4509, 8916}, {8883, -2236}, {8061, 8078}, {8469, -9390}, {74, -476}, {2799, -811}, {7344, 9634}, {5548, 1201}, {1496, -1265}, {2660, 4461}, {1555, -7042}, {3296, 1590}, {5631, -5170}, {7497, 8121}, {4697, 2650}, {4623, -4441}, {7918, 3506}, {9675, -7669}, {1584, -1855}, {2941, -1990}, {7669, -4260}, {7200, -8635}, {1726, -900}, {2566, 9574}, {7835, -4773}, {387, 5742}, {4537, 3683}, {7332, -9832}, {4865, -5171}, {4641, -437}, {3831, 9264}, {5122, -8251}, {2770, -8851}, {4081, -9293}, {9294, -2978}, {8717, -6685}, {9115, -4083}, {4681, -2807}, {5017, 7247}, {6768, -795}, {8826, 7155}, {4947, -6636}, {7191, -1368}, {9884, -7944}, {3461, 878}, {7971, -6355}, {142, 9445}, {5394, 9265}, {595, -4173}, {9972, -111}, {9202, -1311}, {3205, 8317}, {959, 7886}, {5510, -7672}, {1485, -1370}, {7885, -3336}, {5786, -815}, {6380, 2977}, {7817, -3736}, {1385, -2370}, {7142, 5709}, {1275, -6363}, {5154, 3022}, {2902, 2101}, {8849, 9226}, {1991, -1949}, {4267, 1548}, {2720, 5226}, {5786, -5417}, {3907, 7271}, {3213, -8208}, {287, 5351}, {7329, -3333}, {4680, -4854}, {2932, 6066}, {2777, -3574}, {8127, -9596}, {63, -6719}, {3426, -683}, {1735, -1372}
        // {0,0},{1,0},{-1,0},{0,1},{0,-1}
    };
    std::cout << s1.numberOfBoomerangs(data) << std::endl;
    return 0;
}
